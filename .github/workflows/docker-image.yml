name: Docker Image CI

on:
  push:
    branches: ["main"]
    tags:
      - 'v*.*.*'  # Trigger on SemVer tags like v1.0.0, v2.1.3, etc.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: pl0psec/plopsec-core-graph

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v5

    # =========================================================================
    # Docker Image Tagging Strategy (full version only)
    # =========================================================================
    - name: Generate version tags
      id: version
      run: |
        # Check if this is a tag push
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          # Extract full SemVer from tag (e.g., v1.2.3 -> 1.2.3)
          VERSION=${GITHUB_REF#refs/tags/v}
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
        else
          # For main branch commits, use date+SHA (development builds)
          DATE=$(date -u +'%Y.%m.%d')
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          VERSION="dev-${DATE}-${SHORT_SHA}"
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"
        echo "All tags: ${TAGS}"

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # =========================================================================
    # Docker Layer Caching Setup
    # =========================================================================
    # Set up Docker Buildx for advanced caching features
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata (labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=raw,value=dev-{{date 'YYYY.MM.DD'}}-{{sha}},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=plopsec-core-graph
          org.opencontainers.image.description=plopsec-core-graph Fastify API
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
    
    # =========================================================================
    # Build and Push with Layer Caching
    # =========================================================================
    # Uses GitHub Actions cache and registry cache for faster builds
    # - cache-from: Pulls cache from previous builds
    # - cache-to: Saves cache for future builds (mode=max caches all layers)
    # - build-args: Passes NUXT_PUBLIC_APP_VERSION to Dockerfile as build argument
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Pass version to Dockerfile
        build-args: |
          NUXT_PUBLIC_APP_VERSION=${{ steps.version.outputs.version }}
        # Enable layer caching from GitHub Actions cache
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Alternative: Use registry cache (stores cache in ghcr.io)
        # Uncomment these lines and comment out the gha cache lines above if preferred:
        # cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        # cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max